#!/usr/bin/env ruby

# Copyright (c) 2017 Minqi Pan <pmq2001@gmail.com>
#
# This file is part of Ruby Compiler, distributed under the MIT License
# For full terms see the included LICENSE file

require 'fileutils'
require 'open3'
require 'tmpdir'

include FileUtils::Verbose

tmpdir = File.expand_path("rubyc", Dir.tmpdir)

cd File.expand_path('../..', __FILE__)

name =
  if Gem.win_platform?
    'a.exe'
  else
    'a.out'
  end

rubyc = File.expand_path(name, Dir.pwd)

unless File.exist?(rubyc)
  success = system("ruby", "bin/rubyc", "--tmpdir", tmpdir, "bin/rubyc")
  raise "Failed running rubyc for ruby-compiler" unless success

  raise unless File.exist?(rubyc)
  raise unless File.size(rubyc) >= 10_000_000

  chmod "u+x", rubyc unless Gem.win_platform?
end

def check(*command)
  Open3.popen2(*command) do |stdin, stdout, wait_thr|
    status = wait_thr.value
    abort "running #{command.join " "} failed" unless status.success?

    yield stdout.read
  end
end

# PART 1
check rubyc, "--help" do |stdout|
  abort "missing help string" unless
    stdout.include?(%q{Compiling your Ruby application into a single executable.})
end

check rubyc, "--ruby-version" do |stdout|
  abort "invalid ruby version" unless stdout.to_i >= 2
end

puts "Congratulations! PART 1 passed."

# PART 2
cd File.join(tmpdir, "build_pass_1")

env = {
  'ENCLOSE_IO_ALWAYS_USE_ORIGINAL_RUBY' => '1',
  'ENCLOSE_IO_USE_ORIGINAL_RUBY'        => '1',
}

cmds = []
if Gem.win_platform?
  cmds << %w[nmake btest]
  cmds << %w[nmake test-basic]
else
  cmds << %w[make test]
end

cmds.each do |cmd|
  success = system(env, *cmd)
  raise "Failed running #{cmd}" unless success
end

puts "Congratulations! PART 2 passed."
puts "All passed."
